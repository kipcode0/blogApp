package com.kipcode.blogapp.model;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.context.annotation.Bean;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.util.Date;
/*
 Generated by chatGPT
 */
@Service
public class JwtUtility {
    private static final String SECRET_KEY = "abxyfkpd"; // Change this to your secret key
    private static final long EXPIRATION_TIME = 86400000; // 24 hours in milliseconds

    public static String generateToken(UserDetails userDetails) {
        Date now = new Date();
        Date expiration = new Date(now.getTime() + EXPIRATION_TIME);

        String token = Jwts.builder()
                .setSubject(userDetails.getUsername())
                .setIssuedAt(now)
                .setExpiration(expiration)
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();

        return token;
    }

    public static String verifyToken(String token) {
        try {
            Jws<Claims> claimsJws = Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token);
            return claimsJws.getBody().getSubject();
        } catch (Exception e) {
            // Token verification failed
            return null;
        }
    }
    public static boolean isTokenExpired(String token) {
        try {
            Jws<Claims> claimsJws = Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token);
            Date expiration = claimsJws.getBody().getExpiration();
            return expiration.before(new Date());
        } catch (Exception e) {
            // Token verification failed, consider it as expired
            return true;
        }
    }
/*
    public static void main(String[] args) {
        String subject = "exampleUser";
        String generatedToken = generateToken(subject);
        System.out.println("Generated Token: " + generatedToken);

        String verifiedSubject = verifyToken(generatedToken);
        System.out.println("Verified Subject: " + verifiedSubject);
    }
    */

}
